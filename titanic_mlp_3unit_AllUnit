#-----------------------Простой пример с титаником-----------------------#
#--------------------------------Описание--------------------------------#

# Здесь осуществлена система, которая предсказывает выживаемость человека исходя из трех параметров: Возвраста, 
# пола и класса каюты

#Однако точность не высока

import pandas as pd
import numpy as np
from sklearn.neural_network import MLPClassifier
from sklearn.model_selection import train_test_split
from sklearn.metrics import accuracy_score

# Преобразование данных к товарному виду
data = pd.read_csv("data.csv")
data["Sex"] = data["Sex"].map({"male": 0, "female": 1})
data = data.dropna()
#display(data)

# Разделение данных на обучающую и тестовую выборки
train_data, test_data = train_test_split(data, test_size=0.2, random_state=42)

# Определение переменных и целевой переменной для каждого случая
X_train = train_data[["Age", "Sex", "Pclass"]]
y_train = train_data["Survived"].astype(int)
X_test = test_data[["Age", "Sex", "Pclass"]]
y_test = test_data["Survived"].astype(int)

# Обучение модели MLP с тремя переменными
mlp = MLPClassifier(hidden_layer_sizes=(100,), random_state=42)
mlp.fit(X_train, y_train)

# Оценка качества модели
y_pred_train = mlp.predict(X_train)
y_pred_test = mlp.predict(X_test)

print("Train accuracy: {:.3f}".format(accuracy_score(y_train, y_pred_train)))
print("Test accuracy: {:.3f}".format(accuracy_score(y_test, y_pred_test)))

# Создание массива параметров для предсказания
params = np.array([[20, 1, 3], [80, 1, 3], [28, 0, 3]])

# Получение предсказания модели на массиве параметров
predictions = mlp.predict(params)

# Вывод предсказания на экран
print("Predictions:", predictions)

#-----------------------Простой пример с титаником2----------------------#
#--------------------------------Описание--------------------------------#

# # Здесь осуществлена система, которая предсказывает выживаемость человека исходя из всех числовых параметров.

import numpy as np

# предсказание классов для массива данных
def predict_data(clf, scaler, data):
    # нормализация данных
    data = scaler.transform(data)
    # предсказание классов
    y_pred = clf.predict(data)
    return y_pred

# загрузка данных
data = pd.read_csv("data.csv")

# преобразование столбца "Sex" в числовой формат
data['Sex'] = data['Sex'].map({'male': 0, 'female': 1})

# удаление ненужных столбцов
data = data.drop(['PassengerId', 'Name', 'Ticket', 'Cabin', 'Embarked'], axis=1)

# удаление строк с отсутствующими значениями
data = data.dropna()

# разделение данных на обучающую и тестовую выборки
X = data.drop(['Survived'], axis=1)
y = data['Survived']
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)

# нормализация данных
scaler = StandardScaler()
X_train = scaler.fit_transform(X_train)
X_test = scaler.transform(X_test)

# обучение нейронной сети
clf = MLPClassifier(hidden_layer_sizes=(100, 50), max_iter=500, random_state=42)
clf.fit(X_train, y_train)

# оценка качества работы модели
y_pred = clf.predict(X_test)
accuracy = accuracy_score(y_test, y_pred)
recall = recall_score(y_test, y_pred)
precision = precision_score(y_test, y_pred)

print(f"Точность: {accuracy}")
print(f"Полнота: {recall}")
print(f"Точность: {precision}")

# предсказание классов для новых данных, введенных пользователем
data_input = []
for i in range(2):
    pclass = int(input("Введите класс пассажира (1-3): "))
    sex = input("Введите пол пассажира (male/female): ")
    if sex == 'male':
        sex = 0
    elif sex == 'female':
        sex = 1
    age = float(input("Введите возраст пассажира: "))
    sibsp = int(input("Введите количество братьев/сестер или супругов на борту: "))
    parch = int(input("Введите количество родителей или детей на борту: "))
    fare = float(input("Введите цену билета: "))
    data_input.append([pclass, sex, age, sibsp, parch, fare])
    
new_data = np.array(data_input)
y_pred = predict_data(clf, scaler, new_data)
print(y_pred)
